{"version":3,"file":"component---src-pages-templates-revit-tsx-37abd1ac251c35a1dc80.js","mappings":"sLAyCA,UAnCkBA,IAEqC,IAFpC,KACjBC,EAAI,YAAEC,GAC0CF,EAChD,MAAMG,EAAWF,EAAKG,kBAAkBC,OAClC,WAAEC,GAAeJ,EAEvB,OACEK,EAAAA,EAAAA,GAACC,EAAAA,EAAgB,CACfC,UAAU,sDACVF,EAAAA,EAAAA,GAAA,OAAKE,UAAU,8DACbF,EAAAA,EAAAA,GAAA,KAAGE,UAAU,aAAaH,EAAWI,QACrCH,EAAAA,EAAAA,GAAA,MAAIE,UAAU,gCAAgCH,EAAWK,OACzDJ,EAAAA,EAAAA,GAAA,UAAKD,EAAWM,UAEjBT,EAASU,KAAKC,IACbP,EAAAA,EAAAA,GAAA,OACEQ,IAAKD,EAAEE,YAAYC,KACnBC,GAAIJ,EAAEE,YAAYC,KAClBR,UAAU,0CACVF,EAAAA,EAAAA,GAAA,KAAGY,KAAM,IAAIL,EAAEE,YAAYC,SACzBV,EAAAA,EAAAA,GAAA,MAAIE,UAAU,yDACXK,EAAEE,YAAYN,SAGnBH,EAAAA,EAAAA,GAAA,WACEE,UAAU,oBACVW,wBAAyB,CAAEC,OAAQP,EAAEQ,MACrCC,SAAS,mBAIE,EAMhB,MAAMC,EAAqDC,IAAA,IAChEvB,aAAa,WAAEI,EAAU,KAAEoB,EAAI,KAAEC,GAAM,SACvCC,GACgDH,EAAA,OAChDlB,EAAAA,EAAAA,GAACsB,EAAAA,EAAO,CACNnB,MAAO,GAAGJ,EAAWK,UAAUL,EAAWM,QAAQkB,gBAClDC,QAASJ,EAAKI,QACdC,YAAaL,EAAKK,YAClBC,KAAML,EAASM,SACfR,KAAMA,GACN,C,uFC9CJ,MAwCaG,EAAUJ,IAQF,IARG,MACtBf,EAAK,YACLsB,EAAW,IACXG,EAAG,QACHJ,EAAO,KACPE,EAAI,KACJP,EAAI,aACJU,GACaX,EACb,MAAMY,EAAkBL,QAAAA,EAAetB,EACjC4B,EAAU,GAAGP,IAAUE,IACvBM,EAASJ,EAAM,GAAGJ,IAAUI,IAAQ,GAAGJ,kBACvCS,EAAkB,OAATd,EAAgB,QAAU,QAEzC,OACInB,EAAAA,EAAAA,GAACkC,EAAAA,OAAM,CACLC,eAAgB,CACdhB,KAAMA,GAERhB,MAAOA,EACPO,MACGmB,EACD,CACE,CACEO,IAAK,YACLxB,KAAMiB,IAGR,IACDQ,OAAO,CACN,CACED,IAAK,gBACLxB,KAAM,gBAER,CACEwB,IAAK,mBACLE,MAAO,UACP1B,KAAM,yBAER,CACEwB,IAAK,OACLG,KAAM,YACND,MAAO,QACP1B,KAAM,sBAER,CACEwB,IAAK,OACLG,KAAM,YACND,MAAO,QACP1B,KAAM,sBAER,CACEwB,IAAK,WACLxB,KAAM,qBAER,CACEwB,IAAK,YACLxB,KAAM,yBACN4B,MAAO,WAET,CACEJ,IAAK,OACLE,MAAO,oBACP1B,KAAM,kBAIZ6B,KAAM,CACJ,CACEC,KAAM,0BACNC,QAAS,WAEX,CACED,KAAM,uBACNC,QAAS,sBAEX,CACED,KAAM,0BACNC,QAAS,uBAEX,CACED,KAAM,cACNC,QAASb,GAEX,CACEc,SAAU,QACVD,QAASX,GAEX,CACEhB,SAAU,QACV2B,QAASX,GAEX,CACEY,SAAU,MACVD,QAASZ,GAGX,CACEa,SAAU,YACVD,QAASV,GAEX,CACEW,SAAU,UACVD,QAAS,WAEX,CACEC,SAAU,SACVD,QAASZ,GAEX,CACEa,SAAU,WACVD,QAASxC,GAEX,CACEyC,SAAU,iBACVD,QAASb,GAEX,CACEc,SAAU,WACVD,QAASX,GAGX,CACEY,SAAU,eACVD,QAAS,uBAEX,CACEC,SAAU,cACVD,QAASZ,GAEX,CACEa,SAAU,gBACVD,QAASxC,GAEX,CACEyC,SAAU,sBACVD,QAASb,GAEX,CACEc,SAAU,gBACVD,QAASX,GAGX,CACEhB,SAAU,SACV2B,QAAS,+CAGb,C","sources":["webpack://code-cave/./src/pagesTemplates/revit.tsx","webpack://code-cave/./src/components/common/metadata.tsx"],"sourcesContent":["import { HeadFC, HeadProps, PageProps, graphql } from \"gatsby\";\nimport React from \"react\";\nimport ContentContainer from \"../components/common/contentContainer\";\nimport { HeadSeo } from \"../components/common/metadata\";\nimport { IRevitPageContext, IRevitQueryResult } from \"../types/revit.type\";\n\nconst RevitPage = ({\n  data, pageContext\n}: PageProps<IRevitQueryResult, IRevitPageContext>) => {\n  const elements = data.allMarkdownRemark.nodes;\n  const { markupData } = pageContext;\n\n  return (\n    <ContentContainer\n      className=\"flex-col text-secondary-100 text-lg pt-8 sm:pt-16\">\n      <div className=\"bg-[#222123] rounded-[2rem] p-16 flex flex-col gap-6 mb-8\">\n        <p className=\"font-bold\">{markupData.title}</p>\n        <h1 className=\"font-extrabold text-[3.5rem]\">{markupData.head}</h1>\n        <h2>{markupData.subhead}</h2>\n      </div>\n      {elements.map((e) => (\n        <div\n          key={e.frontmatter.link}\n          id={e.frontmatter.link}\n          className=\"bg-[#222123] rounded-[2rem] p-16 mb-8\">\n          <a href={`#${e.frontmatter.link}`}>\n            <h2 className=\"text-[2.5rem] leading-[3rem] font-bold text-left mb-6\">\n              {e.frontmatter.title}\n            </h2>\n          </a>\n          <article\n            className=\"single-post revit\"\n            dangerouslySetInnerHTML={{ __html: e.html }}\n            itemProp=\"articleBody\"\n          />\n        </div>\n      ))}\n    </ContentContainer>\n  );\n};\n\nexport default RevitPage;\n\nexport const Head: HeadFC<IRevitQueryResult, IRevitPageContext> = ({\n  pageContext: { markupData, lang, site },\n  location,\n}: HeadProps<IRevitQueryResult, IRevitPageContext>) => (\n  <HeadSeo\n    title={`${markupData.head} | ${markupData.subhead.toUpperCase()}`}\n    siteUrl={site.siteUrl}\n    description={site.description}\n    path={location.pathname}\n    lang={lang}\n  />\n);\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: {\n        fields: { sourceName: { eq: \"revit\" }, language: { eq: \"en\" } }\n      }\n    ) {\n      nodes {\n        id\n        html\n        frontmatter {\n          title\n          link\n        }\n      }\n    }\n  }\n`;\n","import React, { LinkHTMLAttributes, MetaHTMLAttributes } from \"react\";\nimport { graphql, HeadProps, useStaticQuery } from \"gatsby\";\n\nimport { ILayoutMarkupData } from \"../../types/commonMarkup.type\";\nimport { ILang, TLang } from \"../../types/common.type\";\nimport { Helmet } from \"react-helmet\";\n\nconst getAddress = (lang: TLang): string => {\n  const requisitesData = useStaticQuery(query) as {\n    allMarkdownRemark?: {\n      nodes?:\n        | {\n            fields: { language: string };\n            frontmatter: { layout: ILayoutMarkupData };\n          }[]\n        | null;\n    };\n  };\n\n  const requisites = requisitesData?.allMarkdownRemark?.nodes?.find(\n    (node) => node.fields.language === lang\n  )?.frontmatter?.layout?.requisites;\n\n  const address = requisites\n    ? Object.entries(requisites)\n        .map(([_, value]) => value)\n        .join(\" \")\n    : \"\";\n\n  return address;\n};\n\ninterface HeadSeoProps extends ILang {\n  title: string;\n  description?: string;\n  img?: string;\n  siteUrl: string;\n  path: string;\n  canonicalUrl?: string;\n}\n\n/* export const Head = (props: HeadProps) => (\n  <HeadSeo title={(props.pageContext as any)}>\n    <link id=\"icon\" rel=\"icon\" href=\"icon-specific-for-this-page\" />\n  </HeadSeo>\n) */\n\nexport const HeadSeo = ({\n  title,\n  description,\n  img,\n  siteUrl,\n  path,\n  lang,\n  canonicalUrl,\n}: HeadSeoProps) => {\n  const descriptionText = description ?? title;\n  const pageUrl = `${siteUrl}${path}`;\n  const imgUrl = img ? `${siteUrl}${img}` : `${siteUrl}/siteImage.png`;\n  const locale = lang === \"ru\" ? \"ru_RU\" : \"en_US\";\n\n  return (\n      <Helmet\n        htmlAttributes={{\n          lang: lang\n        }}\n        title={title}\n        link={\n          (canonicalUrl ?\n          [\n            {\n              rel: \"canonical\",\n              href: canonicalUrl\n            } as LinkHTMLAttributes<HTMLLinkElement>\n          ] \n          : [])\n          .concat([\n            {\n              rel: \"shortcut icon\",\n              href: `/favicon.ico`,\n            } as LinkHTMLAttributes<HTMLLinkElement>,\n            {\n              rel: \"apple-touch-icon\",\n              sizes: \"180x180\",\n              href: `/apple-touch-icon.png`,\n            } as LinkHTMLAttributes<HTMLLinkElement>,\n            {\n              rel: \"icon\",\n              type: \"image/png\",\n              sizes: \"32x32\",\n              href: `/favicon-32x32.png`,\n            } as LinkHTMLAttributes<HTMLLinkElement>,\n            {\n              rel: \"icon\",\n              type: \"image/png\",\n              sizes: \"16x16\",\n              href: `/favicon-16x16.png`,\n            } as LinkHTMLAttributes<HTMLLinkElement>,\n            {\n              rel: \"manifest\",\n              href: `/site.webmanifest`,\n            } as LinkHTMLAttributes<HTMLLinkElement>,\n            {\n              rel: \"mask-icon\",\n              href: `/safari-pinned-tab.svg`,\n              color: \"#5bbad5\",\n            } as LinkHTMLAttributes<HTMLLinkElement>,\n            {\n              rel: \"icon\",\n              sizes: \"16x16 32x32 64x64\",\n              href: `/favicon.ico`,\n            } as LinkHTMLAttributes<HTMLLinkElement>,\n          ])\n        }\n        meta={[\n          {\n            name: \"msapplication-TileColor\",\n            content: \"#da532c\"\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n          {\n            name: \"msapplication-config\",\n            content: \"/browserconfig.xml\"\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n          {\n            name: \"msapplication-TileImage\",\n            content: \"/mstile-150x150.png\"\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n          {\n            name: \"description\",\n            content: descriptionText\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n          {\n            property: \"image\",\n            content: imgUrl\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n          {\n            itemProp: \"image\",\n            content: imgUrl\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n          {\n            property: \"url\",\n            content: pageUrl\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n\n          {\n            property: \"og:locale\",\n            content: locale\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n          {\n            property: \"og:type\",\n            content: \"website\"\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n          {\n            property: \"og:url\",\n            content: pageUrl\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n          {\n            property: \"og:title\",\n            content: title\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n          {\n            property: \"og:description\",\n            content: descriptionText\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n          {\n            property: \"og:image\",\n            content: imgUrl\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n\n          {\n            property: \"twitter:card\",\n            content: \"summary_large_image\"\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n          {\n            property: \"twitter:url\",\n            content: pageUrl\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n          {\n            property: \"twitter:title\",\n            content: title\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n          {\n            property: \"twitter:description\",\n            content: descriptionText\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n          {\n            property: \"twitter:image\",\n            content: imgUrl\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n\n          {\n            itemProp: \"sameAs\",\n            content: \"https://www.linkedin.com/company/codecave\"\n          } as MetaHTMLAttributes<HTMLMetaElement>,\n        ]}\n      />\n  );\n};\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { fields: { sourceName: { eq: \"common\" } } }\n      sort: { frontmatter: { order: ASC } }\n    ) {\n      nodes {\n        fields {\n          language\n        }\n        frontmatter {\n          layout {\n            requisites {\n              ein\n              companyCode\n              street\n              city\n              postalCode\n              country\n              phone\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["_ref","data","pageContext","elements","allMarkdownRemark","nodes","markupData","___EmotionJSX","ContentContainer","className","title","head","subhead","map","e","key","frontmatter","link","id","href","dangerouslySetInnerHTML","__html","html","itemProp","Head","_ref2","lang","site","location","HeadSeo","toUpperCase","siteUrl","description","path","pathname","img","canonicalUrl","descriptionText","pageUrl","imgUrl","locale","Helmet","htmlAttributes","rel","concat","sizes","type","color","meta","name","content","property"],"sourceRoot":""}